"""
Django settings for medi_manager project.
Generated by 'django-admin startproject' using Django 4.2.7.
"""
import os
import environ
from .middlewares import UnauthenticatedMiddleware

# Initialise environment variables
env = environ.Env()
environ.Env.read_env()

from pathlib import Path
import django


from datetime import timedelta

from django.utils.encoding import smart_str
django.utils.encoding.smart_text = smart_str

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



env_file = os.path.join(BASE_DIR, '.env')
env.read_env(env_file)



# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
from urllib.parse import urlparse

service_url = "www.medyman.com"

if service_url:
    CSRF_TRUSTED_ORIGINS    = [service_url]
    # SECURE_SSL_REDIRECT     = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
else:
    ALLOWED_HOSTS = ['*']
    print(
        "K_SERVICE_URL environment variable not found."
        " This is a security risk in production."
    )


# Default to an empty list if the environment variable is not set
CSRF_TRUSTED_ORIGINS = os.getenv('DJANGO_CSRF_TRUSTED_ORIGINS', '').split(',') if os.getenv('DJANGO_CSRF_TRUSTED_ORIGINS') else []


CSRF_COOKIE_SAMESITE = 'None'
CSRF_COOKIE_SECURE = True


ALLOWED_HOSTS = ['*'] # More secure default for local development


# Application definition


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Local Apps
    'activity_mapping.apps.ActivityMappingConfig',
    'appointment.apps.AppointmentConfig',
    'leave_calender.apps.LeaveCalenderConfig',
    'booking_slot.apps.BookingSlotConfig',
    'consultation.apps.ConsultationConfig',
    'consultation_symptom.apps.ConsultationSymptomConfig',
    'consultation_medicine.apps.ConsultationMedicineConfig',
    'consultation_instruction.apps.ConsultationInstructionConfig',
    'consultation_investigation.apps.ConsultationInvestigationConfig',
    'component.apps.ComponentConfig',
    'doctor_receptionist_mapping.apps.DoctorReceptionistMappingConfig',
    'entity.apps.EntityConfig',
    'entity_type.apps.EntityTypeConfig',
    'fee_structure.apps.FeeStructureConfig',
    'medicine_master.apps.MedicineMasterConfig',
    'prescription_setting.apps.PrescriptionSettingConfig',
    'procedure.apps.ProcedureConfig',
    'patient_vital.apps.PatientVitalConfig',
    'role.apps.RoleConfig',
    'refer_doctor.apps.ReferDoctorConfig',
    'saved_note.apps.SavedNoteConfig',
    'saved_patient.apps.SavedPatientConfig',
    'specialization.apps.SpecializationConfig',
    'specialization_workflow_mapping.apps.SpecializationWorkflowMappingConfig',
    'specialization_procedure_mapping.apps.SpecializationProcedureMappingConfig',
    'symptom_master.apps.SymptomMasterConfig',
    'vital_master.apps.VitalMasterConfig',
    'template_master.apps.TemplateMasterConfig',
    'investigation_master.apps.InvestigationMasterConfig',
    'test_report.apps.TestReportConfig',
    'user.apps.UserConfig',
    'contact_detail.apps.ContactDetailConfig',
    'user_entity_mapping.apps.UserEntityMappingConfig',
    'user_role_mapping.apps.UserRoleMappingConfig',
    'user_specialization_procedure_mapping.apps.UserSpecializationProcedureMappingConfig',
    'workflow.apps.WorkflowConfig',
    'workflow_component_mapping.apps.WorkflowComponentMappingConfig',
    
    #3rd Party Apps
    'rest_framework',
    'rest_framework.authtoken',
#   'rest_framework_swagger',
    'social_django',
    'corsheaders',
    'django_filters',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'taggit',
    'drf_api_logger', 

   ]


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'medimanagerbackend@gmail.com'
EMAIL_HOST_PASSWORD = 'jgyt xybw jvvu vwgd'
EMAIL_USE_TLS = True

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES':[
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
     'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        # Add other authentication classes if needed
    ],
     'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'
}


MIDDLEWARE = [
     'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'medi_manager.middlewares.UnauthenticatedMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',

    'drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware',
]



DRF_API_LOGGER_DATABASE = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'drf_api_logger': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    # Customize the log format to include user details
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(user)s %(message)s'
        },
    },
}

# Allow all origins for simplicity. You may want to restrict this in production.
CORS_ALLOW_ALL_ORIGINS = True

# CORS_ALLOWED_ORIGINS =  [
#     "http://localhost:3000",
#     "http://127.0.0.1:3000",
# ]

ROOT_URLCONF = 'medi_manager.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'react', 'build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect'
            ],
        },
    },
]

WSGI_APPLICATION = 'medi_manager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}



# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'MediManager$MedyMantestdb',
#         'USER': 'MediManager',
#         'PASSWORD': 'MedyMan1',
#         'HOST': 'MediManager.mysql.pythonanywhere-services.com',
#         'PORT': '3306',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]




# Internationalization


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata' #'America/New_York' #'
USE_TZ = True

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
print(BASE_DIR)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Additional locations of static files
STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, 'static'),  # Django static files (for development)
    os.path.join(BASE_DIR, '/home/MediManager/MedyMan/react/build/'),
]



VENV_PATH = os.path.dirname(BASE_DIR)


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',

]

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=200),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=2),
    'AUTH_TOKEN_CLASSES': (
        'rest_framework_simplejwt.tokens.AccessToken',
    )
}
DJOSER = {
    'LOGIN_FIELD': 'phone_number',
    # 'USER_CREATE_PASSWORD_RETYPE': True,
    # 'USERNAME_CHANGED_EMAIL_CONFIRMATION': True,
    # 'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    # 'SEND_CONFIRMATION_EMAIL': True,
    # 'SET_USERNAME_RETYPE': True,
    # 'SET_PASSWORD_RETYPE': True,
    # 'PASSWORD_RESET_CONFIRM_URL': 'password/reset/confirm/{uid}/{token}',
    # 'USERNAME_RESET_CONFIRM_URL': 'email/reset/confirm/{uid}/{token}',
    # 'ACTIVATION_URL': 'activate/{uid}/{token}',
    # 'SEND_ACTIVATION_EMAIL': True,
    'SOCIAL_AUTH_TOKEN_STRATEGY': 'djoser.social.token.jwt.TokenStrategy',
    'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS': ['http://localhost:8000/google', 'http://localhost:8000/facebook'],
    'SERIALIZERS': {
        'user_create': 'user.serializers.UserCreateSerializer', #auth/users/ - SignUp
        'user': 'user.serializers.UserCreateSerializer',
        'current_user': 'user.serializers.UserProfileSerializer', #auth/users/me
        'user_delete': 'djoser.serializers.UserDeleteSerializer',
    }
}

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '[YOUR GOOGLE OAUTH2 API KEY]'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '[YOUR GOOGLE OAUTH2 API SECRET]'
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['https://www.googleapis.com/auth/userinfo.email', 'https://www.googleapis.com/auth/userinfo.profile', 'openid']
SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = ['first_name', 'last_name']

SOCIAL_AUTH_FACEBOOK_KEY = '[YOUR FACEBOOK API KEY]'
SOCIAL_AUTH_FACEBOOK_SECRET = '[YOUR FACEBOOK API SECRET]'
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    'fields': 'email, first_name, last_name'
}

AUTH_USER_MODEL = 'user.User'



MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# pillow==10.3.0